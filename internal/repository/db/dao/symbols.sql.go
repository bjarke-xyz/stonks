// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: symbols.sql

package dao

import (
	"context"
)

const getAllSymbols = `-- name: GetAllSymbols :many
SELECT id, symbol, name FROM symbols
`

func (q *Queries) GetAllSymbols(ctx context.Context) ([]Symbol, error) {
	rows, err := q.db.QueryContext(ctx, getAllSymbols)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Symbol
	for rows.Next() {
		var i Symbol
		if err := rows.Scan(&i.ID, &i.Symbol, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const testPrices = `-- name: TestPrices :many
SELECT id, symbol_id, price, currency, timestamp FROM prices
`

func (q *Queries) TestPrices(ctx context.Context) ([]Price, error) {
	rows, err := q.db.QueryContext(ctx, testPrices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Price
	for rows.Next() {
		var i Price
		if err := rows.Scan(
			&i.ID,
			&i.SymbolID,
			&i.Price,
			&i.Currency,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
