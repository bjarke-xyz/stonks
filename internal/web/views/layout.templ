package views

import (
	"fmt"
	"github.com/bjarke-xyz/stonks/internal/core"
)

type BaseOpenGraphModel struct {
	Title string
	// Type  string
	Image       string
	Url         string
	Description string
}
type BaseViewModel struct {
	Path          string
	UnixBuildTime int64
	Title         string

	OpenGraph *BaseOpenGraphModel

	FlashInfo  []string
	FlashWarn  []string
	FlashError []string
}

templ Layout(viewModel BaseViewModel, children ...templ.Component) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1"/>
			<title>{ viewModel.Title }</title>
			<link href={ fmt.Sprintf("/static/css/tailwind.css?v=%v", viewModel.UnixBuildTime) } rel="stylesheet"/>
			<script src={ fmt.Sprintf("/static/js/main.js?v=%v", viewModel.UnixBuildTime) } defer></script>
		</head>
		<body>
			<div class="h-screen flex flex-col">
				@header(viewModel.Path)
				<div class="mb-auto mt-10">
					if len(viewModel.FlashError) > 0 {
						@flash(core.FlashTypeError, viewModel.FlashError)
					}
					if len(viewModel.FlashWarn) > 0 {
						@flash(core.FlashTypeWarn, viewModel.FlashWarn)
					}
					if len(viewModel.FlashInfo) > 0 {
						@flash(core.FlashTypeInfo, viewModel.FlashInfo)
					}
					for _, child := range children {
						@child
					}
				</div>
				@footer(viewModel)
			</div>
		</body>
	</html>
}

templ headerLink(currentPath string, linkPath string, text string) {
	if currentPath == linkPath {
		<a class="font-bold" href={ templ.URL(linkPath) }>{ text }</a>
	} else {
		<a href={ templ.URL(linkPath) }>{ text }</a>
	}
}

templ header(path string) {
	<div class="flex flex-col items-center py-2">
		<div class="flex flex-row space-x-4">
			<div>
				@headerLink(path, "/", "stonks")
			</div>
		</div>
	</div>
}

templ footer(_ BaseViewModel) {
	<footer class="flex flex-col items-center p-2">
		<div>yo</div>
	</footer>
}

templ openGraph(model BaseOpenGraphModel) {
	<meta property="og:title" content={ model.Title }/>
	<meta property="og:type" content="website"/>
	<meta property="og:image" content={ model.Image }/>
	<meta property="og:url" content={ model.Url }/>
	<meta property="og:description" content={ model.Description }/>
}

var flashScriptHandle = templ.NewOnceHandle()

templ flash(flashType string, msgs []string) {
	@flashScriptHandle.Once() {
		<script>
		function handleFlashClick(elem) {
			const flashContainer = elem.parentElement;
			flashContainer?.remove();
		}
		</script>
	}
	<div class={ "relative p-4 m-4 rounded-md text-slate-900 ", templ.KV("bg-red-200", flashType == core.FlashTypeError), templ.KV("bg-yellow-200", flashType == core.FlashTypeWarn), templ.KV("bg-blue-200", flashType == core.FlashTypeInfo) }>
		<button onclick="handleFlashClick(this)" onclick="this.parentElement.style.display='none';" class="absolute top-2 right-2 text-slate-900">
			&times;
		</button>
		for _, msg := range msgs {
			<p class="text-xl">
				{ msg }
			</p>
		}
	</div>
}
